// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                       String  @id @unique @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @unique @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @unique @default(cuid())
  image         String?
  name          String?
  email         String?     @unique
  phoneNumber   String?
  telegram      String?
  emailVerified DateTime?
  role          String?
  accounts      Account[]
  sessions      Session[]
  Candidate     Candidate[]
  Vacancy       Vacancy[]
  Comment       Comment[]
  Templates     Templates[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vacancy {
  id          String         @id @unique @default(cuid())
  tags        Tag[]
  status      StatusVacancy?
  idCustomer  Customer?
  authorId    User           @relation(fields: [userId], references: [id])
  createdAt   DateTime       @default(now())
  title       String?
  salaryFrom  String?
  salaryTo    String?
  body        String?
  duties      String?
  requirement String?
  conditions  String?
  userId      String
  Candidate   Candidate[]
}

model Candidate {
  id              String   @id @unique @default(cuid())
  tags            Tag[]
  // status          statusCandidate?
  pinnedToVacancy Vacancy? @relation(fields: [vacancyId], references: [id])
  author          User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  address         String?
  lastName        String?
  firstName       String?
  patronymic      String?
  age             Int?
  email           String?  @unique
  phoneNumber     String?  @unique
  telegram        String?  @unique
  urls            Urls[]
  body            String?
  profile         String?
  experience      String?
  education       String?
  skills          String?
  languages       String?
  projects        String?
  sertificates    String?
  hobby           String?
  comment         Comment? @relation(fields: [commentId], references: [id])
  vacancyId       String?
  userId          String
  commentId       String?
  // role Role @default(Candidate)
}

model Customer {
  id        String  @id @unique @default(cuid())
  idVacancy Vacancy @relation(fields: [vacancyId], references: [id])
  email     String? @unique
  name      String? @unique
  vacancyId String  @unique
}

model Comment {
  id        String      @id @unique @default(cuid())
  author    User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  body      String?
  Candidate Candidate[]
  userId    String
}

model Tag {
  id          String     @id @unique @default(cuid())
  label       String?    @unique
  createdAt   DateTime   @default(now())
  Vacancy     Vacancy?   @relation(fields: [vacancyId], references: [id])
  vacancyId   String?
  Candidate   Candidate? @relation(fields: [candidateId], references: [id])
  candidateId String?
}

model Templates {
  id        String    @id @unique @default(cuid())
  name      String    @unique
  author    User      @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())
  body      String?
  userId    String
}

model Urls {
  id          String    @id @unique @default(cuid())
  idCandidate Candidate @relation(fields: [candidateId], references: [id])
  url         String?   @unique
  candidateId String
}

enum StatusVacancy {
  inProgress
  important
  archive
}

enum StatusCandidate {
  new
  firstLetter
  secondLetter
  interested
  screeningInterview
  underConsideration
  technicalInterview
  testTask
  lifeCoding
  securityCheck
  waitingOffer
  signedOffer
  notAcceptedOffer
  hired
  completedTrialPeriod
  notCompletedTrialPeriod
  rejection
  reserve
}
